require 'modules.hud_cache'

function init(self)
	msg.post('.', 'acquire_input_focus')
	self.custom = {
		mage_moved = false,
		const_speed = 960,
		fn_input_mage_moved = function(self, act_id, act)
			if  (act_id == hash('move_up') 
			or  act_id == hash('move_down')
			or  act_id == hash('move_left')
			or  act_id == hash('move_right'))
			and act.released then
				self.custom.mage_moved = true
			end
		end,
		fn_message_attack_mage = function(self, msg_id, messg)
			if     msg_id == hash('trigger_response') 
			and    messg.own_group == hash('awareness') then
				table.insert(messages, 1, 'Oh no, you\'ve been noticed by a Ugly Skeleton')
			elseif msg_id == hash('contact_point_response') 
			and    messg.own_group == hash('mobs') 
			and    messg.other_group == hash('mage') then
				msg.post(messg.other_id, 'Killed')
			end
		end,
		fn_message_wall_collision = function(self, msg_id, msg)
			if  msg_id == hash("contact_point_response") 
			and msg.other_group ~= hash('mage') then
				go.set_position(
					go.get_position() + msg.normal * msg.distance
				)
			end
		end,
		fn_update_move = function(self, dt)
			if self.custom.mage_moved then
				sound.play('#skeleton_steps')
				local curr_position = go.get_position()
				local mage_position = go.get_world_position('mage')
				local direction = vmath.vector3()
				if curr_position.x > mage_position.x then
					direction.x = -1
				elseif curr_position.x < mage_position.x then
					direction.x = 1
				end
				if curr_position.y > mage_position.y then
					direction.y = -1
				elseif curr_position.y < mage_position.y then
					direction.y = 1
				end
				go.set_position(
					curr_position + direction * self.custom.const_speed * dt
				)
			end
		end,
	}
	self.deconstruct = {
		fn_update_mage_moved = function(self)
			if self.custom.mage_moved then
				self.custom.mage_moved = false
			end
		end,
	}
end

function update(self, dt)
	for fn_name, fn in pairs(self.custom) do
		if string.find(fn_name, 'fn_update') then 
			fn(self, dt) 
		end
	end
	for fn_name, fn in pairs(self.deconstruct) do
		if string.find(fn_name, 'fn_update') then 
			fn(self, dt) 
		end
	end
end

function on_message(self, message_id, message, sender)
	for fn_name, fn in pairs(self.custom) do
		if string.find(fn_name, 'fn_message') then 
			fn(self, message_id, message) 
		end
	end
end

function on_input(self, action_id, action)
	for fn_name, fn in pairs(self.custom) do
		if string.find(fn_name, 'fn_input') then 
			fn(self, action_id, action) 
		end
	end
end