local hashed = require("modules.hashed")

local hash_levels = {
	[hashed.main_menu] = 'main_menu',
	[hashed.dungeon_entrance] = 'dungeon_entrance',
	[hashed.dungeon_learning_1] = 'dungeon_learning_1',
	[hashed.dungeon_learning_2] = 'dungeon_learning_2',
	[hashed.dungeon_learning_3] = 'dungeon_learning_3',
	[hashed.dungeon_learning_4] = 'dungeon_learning_4',
	[hashed.dungeon_maze_1] = 'dungeon_maze_1',
	[hashed.dungeon_maze_2] = 'dungeon_maze_2',
	[hashed.game_over] = 'game_over',
}

local currently_enabled = nil

local unloader = function(enab)
	if enab ~= nil then
		msg.post(enab, 'unload')
	end
end

local load_and_enable = function(lev, enab)
	unloader(enab)
	msg.post(lev, 'load')
	msg.post(lev, 'enable')
	currently_enabled = lev
end

local loader = function(level)

	if type(level) == 'userdata' then
		level = hash_levels[level] -- map hash to string value
	end
	
	if level == 'main_menu' then
		previous_level = nil		
	end

	local lev = "level_selector#" .. level
	load_and_enable(lev, currently_enabled)
end

function init(self)
	msg.post("@render:", "use_fixed_fit_projection", {near = -1, far = 1})
	msg.post('.', 'acquire_input_focus')

	loader('main_menu')
end

function on_message(self, message_id, message, sender)
	if message_id == hash('load') then
		--print(type(message_id))
		--print(type(message))
		--print(type(message.level))
		loader(message.level)
	else
		print("message_id not supported" .. message_id)
	end
end
