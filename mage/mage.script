require 'modules.positions'

function init(self)
	msg.post('.', 'acquire_input_focus')
	msg.post('/mage_cam', 'acquire_camera_focus')
	-- All personalized functions for the game object
	self.custom = {
		const_speed = 960,
		val_move = vmath.vector3(),
		fn_input_move = function(self, act_id, act)
			if act_id == hash('move_up') and act.released then
				self.custom.val_move.y = 1
			elseif act_id == hash('move_down') and act.released then
				self.custom.val_move.y = -1
			elseif act_id == hash('move_left') and act.released then
				self.custom.val_move.x = -1
			elseif act_id == hash('move_right') and act.released then
				self.custom.val_move.x = 1
			end	
		end,
		fn_input_teleport = function(self, act_id, act)
			if act_id == hash('teleport') then
				if act.pressed then
					sprite.play_flipbook('#teleport_zone', 'active_teleport')
				elseif act.released then
					sprite.play_flipbook('#teleport_zone', 'inactive_teleport')
				end
			end	
		end,
		fn_update_move = function(self, dt)
			if self.custom.val_move ~= vmath.vector3() then
				sound.play('#step_on_stone')
			end
			go.set_position(
				go.get_position() + self.custom.val_move * self.custom.const_speed * dt
			)
			
		end,
		fn_message_wall_collision = function(self, msg_id, msg)
			if msg_id == hash("contact_point_response") then
				go.set_position(go.get_position() + msg.normal * msg.distance)
			end
		end
	}
	-- Dconstruct everything that has to be clean to original values
	self.deconstruct = {
		fn_update_reset_movement = function(self, dt) 
			self.custom.val_move = vmath.vector3() 
		end
	}
	if mage_spawn_position ~= vmath.vector3() then
		go.set_position(mage_spawn_position)
	end
end

function update(self, dt)
	for fn_name, fn in pairs(self.custom) do
		if string.find(fn_name, 'fn_update') then 
			fn(self, dt) 
		end
	end
	for fn_name, fn in pairs(self.deconstruct) do
		if string.find(fn_name, 'fn_update') then 
			fn(self, dt) 
		end
	end
end

function on_message(self, message_id, message, sender)
	for fn_name, fn in pairs(self.custom) do
		if string.find(fn_name, 'fn_message') then 
			fn(self, message_id, message) 
		end
	end
end

function on_input(self, action_id, action)
	for fn_name, fn in pairs(self.custom) do
		if string.find(fn_name, 'fn_input') then 
			fn(self, action_id, action) 
		end
	end
end